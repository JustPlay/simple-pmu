simple-pmu
----------

This is a simple Intel PMU driver that allows to read fixed counters
from user space.
    
Useful to measure cycles without worrying about Turbo mode and p-states
Essentially this is a replacement for RDTSC for performance analysis.
This has lower overhead than classic RDTSC.

Can be only used by writing code.
    
Doesn't attempt to compete with any of the big PMU boys like
perf or oprofile, it just aims to be a RDTSC replacement.

This works currently only on modern Intel CPUs (anything with
"arch_perfmon" in /proc/cpuinfo)
   
Usage
-----

Install kernel module:

make
(or make KDIR=/your/kernel/source or objdir)
su
make modules_install

Install header files:

make install

Application usage
-----------------

Load the kernel module

modprobe simple-pmu

Measuring cycles:

Copy cycles.h somewhere where your application can find it with -I..

#define _GNU_SOURCE 1
...
#include "cycles.h"

...

counter_t a, b;

pin_cpu(NULL);
if (perfmon_available() == 0) ... exit...

sync_core();
a = unhalted_core();
<code to measure>
b = unhalted_core();
sync_core();
printf("%llu cycles\n", b - a);

The sync_core()s are needed to prevent an out of order CPU from 
moving instructions outside the measurement window. 
pin_cpu() pins the thread to the current CPU because CPU changes
could cause mismeasurements. You can call unpin_cpu()
afterwards to unpin. For this it is needed to pass a cpu_set_t
to pin_cpu() and afterwards to unpin_cpu().

Measuring retired instructions:

#include "cycles.h"

counter_t a, b;

pin_cpu(NULL);
if (perfmon_available() == 0) ... exit...

sync_core();
a = insn_retired();
<code to measure>
b = insn_retired();
sync_core();
printf("%llu instructions\n", b - a);

unhalted_ref() is also available. Since Nehalem this does nothing.
Before nehalem it would count frontside bus cycles.

rdtsc() and rdtscp() (RDTSC with synchronization) are also available,
however for those all the caveats described at the beginning apply.

Kernel interface
----------------

The exporting of the various counters can be controlled through
/sys/devices/system/simple-pmu/simple-pmu0/

ring  
The ring the counters are exported to. Default to 3.

rdpmc_fixed
If not zero start the fixed counters

Notes
-----
tcyc.c is a simple demo program showing (nearly) all the cycles.h
features.  You can build it with "make tcyc"

#define _GNU_SOURCE 1 must be defined at the beginning of the 
source files that include cycles.h

There is currently no allocation for the fixed counters, which
are also used by perf and other profilers. Don't use those in parallel.
Interaction with oprofile is fine.

Author
------

simple-pmu was written by Andi Kleen <andi@firstfloor.org>
