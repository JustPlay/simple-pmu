simple-pmu
----------

This is a simple Intel PMU driver that allows to read fixed counters
from user space.
    
Useful to measure cycles without worrying about Turbo mode and p-states.
Essentially this is a replacement for RDTSC for performance analysis.
This has lower overhead than classic RDTSC.

Can be only used by writing code.
    
Doesn't attempt to compete with any of the big PMU boys like
perf or oprofile, it just aims to be a RDTSC replacement.
   
Usage
-----

Install kernel module:

make
(or make KDIR=/your/kernel/source or objdir)
su
make modules_install

Install header files:

make install

Application usage
-----------------

Load the kernel module

modprobe simple-pmu

Measuring cycles:

#include "cycles.h"

...

counter_t a, b;

if (perfmon_available() == 0) ... exit...

sync_core();
a = unhalted_core();
<code to measure>
b = unhalted_core();
sync_core();
printf("%llu cycles\n", b - a);

The sync_core()s are needed to prevent an out of order CPU from 
moving instructions outside the measurement window. 

Measuring retired instructions:

#include "cycles.h"

counter_t a, b;

if (perfmon_available() == 0) ... exit...

sync_core();
a = insn_retired();
<code to measure>
b = insn_retired();
sync_core();
printf("%llu instructions\n", b - a);

Caveats
=======

The program should run on the same CPU core during the measuremnt, for example
using taskset

